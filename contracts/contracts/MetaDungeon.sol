pragma solidity ^0.8.0;


import "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol";
import "../interfaces/IMetaDungeon.sol";
import "./OZ_forks/aNFT.sol";
import "./OZ_forks/extensions/aNFTEnumerableUpgradeable.sol";
import "./OZ_forks/extensions/aNFTBurnableUpgradeable.sol";
import "./OZ_forks/extensions/aNFTPausableUpgradeable.sol";
import "./OZ_forks/extensions/aNFTURIStorageUpgradeable.sol";

/**
 * @dev {aNFT} token, including:
 *
 *  - ability for holders to burn (destroy) their tokens
 *  - a minter role that allows for token minting (creation)
 *  - a pauser role that allows to stop all token transfers
 *  - token ID and URI autogeneration
 *
 * This contract uses {AccessControl} to lock permissioned functions using the
 * different roles - head to its documentation for details.
 *
 * The account that deploys the contract will be granted the minter and pauser
 * roles, as well as the default admin role, which will let it grant both minter
 * and pauser roles to other accounts.
 */
contract MetaDungeon is
    ContextUpgradeable,
    AccessControlEnumerableUpgradeable,
    aNFTEnumerableUpgradeable,
    aNFTBurnableUpgradeable,
    aNFTPausableUpgradeable,
    aNFTURIStorageUpgradeable,
    IMetaDungeon
{
    function initialize(
        string memory name,
        string memory symbol,
        string memory baseTokenURI
    ) public virtual initializer {
        __MetaDungeon_init(name, symbol, baseTokenURI);
    }


    using CountersUpgradeable for CountersUpgradeable.Counter;

    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");

    CountersUpgradeable.Counter private _tokenIdTracker;

    string private _baseTokenURI;


    /**
     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the
     * account that deploys the contract.
     *
     * Token URIs will be autogenerated based on `baseURI` and their token IDs.
     * See {ERC721-tokenURI}.
     */
    function __MetaDungeon_init(
        string memory name,
        string memory symbol,
        string memory baseTokenURI
    ) internal onlyInitializing {
        __aNFT_init_unchained(name, symbol);
        __Pausable_init_unchained();
        __MetaDungeon_init_unchained(name, symbol, baseTokenURI);
    }

    function __MetaDungeon_init_unchained(
        string memory,
        string memory,
        string memory baseTokenURI
    ) internal onlyInitializing {
        _baseTokenURI = baseTokenURI;
        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
        _setupRole(MINTER_ROLE, _msgSender());
        _setupRole(PAUSER_ROLE, _msgSender());
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return _baseTokenURI;
    }

    function baseURI() external view override returns (string memory) {
        return _baseURI();
    }

    function setBaseURI(string memory newBaseTokenURI) public virtual override onlyAdmin {
        _baseTokenURI = newBaseTokenURI;
    }

    /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721Upgradeable-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {aNFT-_mint}.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     */
    function mint(address to, address brain) public virtual override returns (uint) {
        return mint(to, brain, new string[](0));
    }

    function mint(address to, address brain, string[] memory tokenURIs) public virtual override returns (uint tokenId) {
        require(hasRole(MINTER_ROLE, _msgSender()), "MD: must have minter role");
        // We cannot just use balanceOf to create the new tokenId because tokens
        // can be burned (destroyed), so we need a separate counter.
        tokenId = _tokenIdTracker.current();
        _safeMint(to, brain, tokenId);
        _tokenIdTracker.increment();

        if (tokenURIs.length > 0) {
            _setTokenURIs(tokenId, tokenURIs);
        }
    }

    function setTokenURIs(uint256 tokenId, string[] memory tokenURIs) external override onlyAdmin {
        _setTokenURIs(tokenId, tokenURIs);
    }

    /**
     * @dev Pauses all token transfers.
     *
     * See {aNFTPausableUpgradeable} and {Pausable-_pause}.
     *
     * Requirements:
     *
     * - the caller must have the `PAUSER_ROLE`.
     */
    function pause() public virtual override {
        require(hasRole(PAUSER_ROLE, _msgSender()), "MD: must have pauser role to pause");
        _pause();
    }

    /**
     * @dev Unpauses all token transfers.
     *
     * See {aNFTPausableUpgradeable} and {Pausable-_unpause}.
     *
     * Requirements:
     *
     * - the caller must have the `PAUSER_ROLE`.
     */
    function unpause() public virtual override {
        require(hasRole(PAUSER_ROLE, _msgSender()), "MD: must have pauser role to unpause");
        _unpause();
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual override(aNFT, aNFTEnumerableUpgradeable, aNFTPausableUpgradeable) {
        super._beforeTokenTransfer(from, to, tokenId);
    }

    /**
     * @dev See {IERC165Upgradeable-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId)
        public
        view
        virtual
        override(IERC165Upgradeable, AccessControlEnumerableUpgradeable, aNFT, aNFTEnumerableUpgradeable)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }

    function _burn(uint256 tokenId) internal virtual override(aNFT, aNFTURIStorageUpgradeable) {
        super._burn(tokenId);
    }

    function tokenURI(uint256 tokenId) public view virtual override(IMetaDungeon, aNFT, aNFTURIStorageUpgradeable) returns (string memory) {
        return super.tokenURI(tokenId);
    }

    modifier onlyAdmin {
        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), "MD: must have admin role");
        _;
    }
}
